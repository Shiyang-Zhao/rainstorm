/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.8/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    implementation 'com.github.ben-manes.caffeine:caffeine:3.1.8'
    implementation 'org.unix4j:unix4j-command:0.6'
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation 'org.json:json:20231013'

    // Use JUnit Jupiter for testing.
    testImplementation libs.junit.jupiter

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // This dependency is used by the application.
    implementation libs.guava
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

application {
    // Define the main class for the application.
    mainClass = 'com.logquery.client.Client'
}

tasks.withType(JavaExec) {
    systemProperty 'hosts', project.findProperty('hosts')
    systemProperty 'log_directory', project.findProperty('log_directory')

    systemProperty 'mp1_port', project.findProperty('mp1_port')
    systemProperty 'mp1_timeout', project.findProperty('mp1_timeout')

    systemProperty 'mp2_introducer_ip', project.findProperty('mp2_introducer_ip')
    systemProperty 'mp2_introducer_port', project.findProperty('mp2_introducer_port')
    systemProperty 'mp2_node_port', project.findProperty('mp2_node_port')
    systemProperty 'mp2_k', project.findProperty('mp2_k')
    systemProperty 'mp2_period', project.findProperty('mp2_period')
    systemProperty 'mp2_fail_timeout', project.findProperty('mp2_fail_timeout')
    systemProperty 'mp2_suspicion_timeout', project.findProperty('mp2_suspicion_timeout')

    systemProperty 'mp3_m', project.findProperty('mp3_m')
    systemProperty 'mp3_n', project.findProperty('mp3_n')
    systemProperty 'mp3_quorum', project.findProperty('mp3_quorum')
    systemProperty 'mp3_lrucache_size', project.findProperty('mp3_lrucache_size')
    systemProperty 'mp3_port', project.findProperty('mp3_port')
    systemProperty 'mp3_local_base_path', project.findProperty('mp3_local_base_path')
    systemProperty 'mp3_remote_base_path', project.findProperty('mp3_remote_base_path')

    systemProperty 'mp4_port', project.findProperty('mp4_port')
    systemProperty 'mp4_log_timeout', project.findProperty('mp4_log_timeout')
    systemProperty 'mp4_num_chunks', project.findProperty('mp4_num_chunks')
    systemProperty 'mp4_class_path', project.findProperty('mp4_class_path')
    systemProperty 'mp4_base_path', project.findProperty('mp4_base_path')
}

task runClient(type: JavaExec) {
    mainClass = 'com.logquery.client.Client'
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
}

task runServer(type: JavaExec) {
    mainClass = 'com.logquery.server.Server'
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
}

task runNode(type: JavaExec) {
    mainClass = 'com.membership.node.Node'
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
}

task runIntroducer(type: JavaExec) {
    mainClass = 'com.membership.introducer.Introducer'
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
}

task runHyDFSNode(type: JavaExec) {
    mainClass = 'com.filesystem.node.Node'
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
}

task runHyDFSIntroducer(type: JavaExec) {
    mainClass = 'com.filesystem.introducer.Introducer'
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
}

task runRainStormNode(type: JavaExec) {
    mainClass = 'com.streamprocessingsystem.node.Node'
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
}

task runRainStormIntroducer(type: JavaExec) {
    mainClass = 'com.streamprocessingsystem.introducer.Introducer'
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}
